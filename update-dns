#!/usr/bin/python
import sys, os, argparse
import logging
import dns.resolver, dns.reversename, dns.update, dns.tsigkeyring

def nslookup(target, zone=None):
    try:
        try:
            a = dns.resolver.query(target+'.'+zone+'.','A')
        except:
            a = dns.resolver.query(target,'A')
        return {'name':target,'ip':a.response.answer[0][0].to_text()}
    except:
        revname = dns.reversename.from_address(target)
        a = dns.resolver.query(revname,'PTR')
        return {'name':a.response.answer[0][0].to_text(),'ip':target}

def do_update():
    if not args.ip: raise ValueError('need an IP to update')
    if not args.name: raise ValueError('need a name to update')
    key = get_key()
    u = dns.update.Update(args.zone, keyring=key)
    u.replace(args.name,3600,'A',args.ip)
    dns.query.tcp(u, args.server, timeout=10)
    revname = dns.reversename.from_address(args.ip).to_text()
    ptrzone = '.'.join(revname.split('.')[1:])
    u = dns.update.Update(ptrzone, keyring=key)
    u.replace(revname,3600,'PTR',args.name+'.'+args.zone+'.')
    dns.query.tcp(u, args.server, timeout=10)

def do_remove():
    if not args.ip: raise ValueError('need an IP to remove')
    key = get_key()
    revname = dns.reversename.from_address(args.ip).to_text()
    ptrzone = '.'.join(revname.split('.')[1:])
    u = dns.update.Update(ptrzone, keyring=key)
    u.delete(revname)
    dns.query.tcp(u, args.server, timeout=10)
    if not args.name:
        try:
            args.name = nslookup(args.ip)['name']
        except:
            return
    u = dns.update.Update(args.zone, keyring=key)
    u.delete(args.name)
    dns.query.tcp(u, args.server, timeout=10)

def get_key():
    '''This is designed to parse the antique syntax used in the rndc-key file.'''
    with open(args.keyfile) as f:
       keyfile = [x.split('}') for x in f.read().split('{')]
    keydata = [item.strip() for items in keyfile for item in items]
    keydata = [list(filter(bool,x.split(';'))) for x in keydata]
    keydata = list(filter(lambda q: len(q) > 0 ,keydata))
    keys={}
    for n in range(len(keydata))[::2]:
       key = secret = None
       if len(keydata) == n+1: continue
       key = list(filter(bool,keydata[n][0].split(' ')))
       if key[0] != 'key': continue
       key = key[1].strip('"')
       for d in keydata[n+1]:
           d = list(filter(bool,d.strip().split(' ')))
           if d[0] == 'secret':
               secret = d[1]
       if key is not None and secret is not None:
           keys[key]=secret
    return dns.tsigkeyring.from_text(keys)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-u",help="Update DNS entry",action="store_true")
    parser.add_argument("-r",help="Remove DNS entry",action="store_true")
    parser.add_argument("-k","--keyfile",help="Path to the shared key file.",default="/etc/bind/rndc.key")
    parser.add_argument("-n","--name",help="Host Name",default="")
    parser.add_argument("-z","--zone",help="Zone Name",default=None)
    parser.add_argument("-i","--ip",help="IP",default="")
    parser.add_argument("-s","--server",help="Server IP",default='127.0.0.1')
    args = parser.parse_args()

    if args.u:
       do_update()
    elif args.r:
       do_remove()
    else:
        parser.print_help()
